#!/usr/bin/env php
<?php

require_once('vendor/autoload.php');

$version = new \Concise\Version();
echo trim("Concise " . $version->getConciseVersion()) . " by Elliot Chance.\n\n";

class Concise_ResultPrinter extends PHPUnit_TextUI_ResultPrinter
{
    protected $width = 79;

    protected $numTestsFailed = 0;

    protected $numTestsErrors = 0;

    protected $numTestsIncomplete = 0;

    protected $numTestsRisky = 0;

    protected $numTestsSkipped = 0;

    protected $lastUpdate;

    protected $issueCount = 1;

    public function __construct()
    {
        parent::__construct();
        $this->width = exec('tput cols');
    }

    public function write($buffer)
    {
        if(substr($buffer, 0, 7) !== 'PHPUnit') {
            return parent::write($buffer);
        }
    }

    public function appendTextAbove($text)
    {
        echo str_replace("\n", "\033[K\n", $text);
        $this->update();
    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        if ($test instanceof PHPUnit_Framework_TestCase) {
            $this->numAssertions += $test->getNumAssertions();
        }
        else if ($test instanceof PHPUnit_Extensions_PhptTestCase) {
            $this->numAssertions++;
        }

        ++$this->numTestsRun;
        $this->update();
    }

    protected function printHeader()
    {
        echo "\n";
    }

    protected function printFooter(PHPUnit_Framework_TestResult $result)
    {
    	if (count($result) === 0) {
    		$message = 'No tests executed!';
            echo "\033[0;30m\033[42m{$message}\033[0m";
        }
        else if ($result->wasSuccessful() &&
                 $result->allHarmless() &&
                 $result->allCompletelyImplemented() &&
                 $result->noneSkipped()) {
    		$message = 'OK';
	        echo "\033[0;30m\033[42m{$message}\033[0m";
        }
        else if ((!$result->allCompletelyImplemented() ||
                  !$result->allHarmless() ||
                  !$result->noneSkipped()) &&
                 $result->wasSuccessful()) {
    		$message = 'OK, but incomplete, skipped, or risky tests!';
	        echo "\033[0;30m\033[42m{$message}\033[0m";
        }

		parent::printHeader();
    }

    protected function repeat($string, $times)
    {
    	if($times < 0) {
    		return '';
    	}
    	return str_repeat($string, $times);
    }

    public function update()
    {
        $echo = '';
        $assertionString = $this->numAssertions . ' assertion' . ($this->numAssertions == 1 ? '' : 's');
        $echo .= $assertionString . $this->repeat(' ', $this->width - (2 * $this->numTestsWidth) - 11 - strlen($assertionString));
        $done = $this->numTestsRun / $this->numTests;
        $echo .= sprintf(' %' . $this->numTestsWidth . 'd / %' . $this->numTestsWidth . "d (%3s%%)\n",
            $this->numTestsRun, $this->numTests, floor($done * 100));

        $successes = $this->numTestsRun;
        $skipped = $incomplete = $failures = 0;
        if($this->numTestsFailed || $this->numTestsErrors) {
            $total = $this->numTestsFailed + $this->numTestsErrors;
        	$failures = ceil($this->width * $total / $this->numTests);
            $successes -= $this->numTestsFailed + $this->numTestsErrors;
        }
        if($this->numTestsIncomplete || $this->numTestsRisky) {
            $total = $this->numTestsIncomplete + $this->numTestsRisky;
            $incomplete = ceil($this->width * $total / $this->numTests);
            $successes -= $this->numTestsIncomplete + $this->numTestsRisky;
        }
        if($this->numTestsSkipped) {
            $skipped = ceil($this->width * $this->numTestsSkipped / $this->numTests);
            $successes -= $this->numTestsSkipped;
        }
        $successes = floor($this->width * $done) - $failures - $incomplete - $skipped;
        $echo .= "\033[42m" . $this->repeat(' ', $successes);
        $echo .= "\033[101m" . $this->repeat(' ', $failures);
        $echo .= "\033[103m" . $this->repeat(' ', $incomplete);
        $echo .= "\033[104m" . $this->repeat(' ', $skipped);
        $echo .= "\033[0m" . $this->repeat('_', $this->width - $successes - $failures - $incomplete - $skipped) . "\n";

        echo $echo . "\033[2F";
    }

    protected function printDefects(array $defects, $type)
    {
    }

    protected function printDefect(PHPUnit_Framework_TestFailure $defect, $count)
    {
    }

    protected function getFilePath($absolutePath)
    {
        $cwd = getcwd();
        if (substr($absolutePath, 0, strlen($cwd)) === $cwd) {
            return substr($absolutePath, strlen($cwd) + 1);
        }
        return $absolutePath;
    }

    protected function prefixLines($prefix, $lines)
    {
        return $prefix . str_replace("\n", "\n$prefix", $lines);
    }

    protected function add(PHPUnit_Framework_Test $test, Exception $e, $color)
    {
        $top = "{$this->issueCount}. \033[9{$color};4m" . get_class($test) . "::" . $test->getName() . "\n";
        $message = " " . $e->getMessage() . "\n\n";
        $lastFile = '';
        foreach($e->getTrace() as $line) {
            if(!array_key_exists('file', $line)) {
                $line['file'] = '(unknown file)';
            }
            if(!array_key_exists('line', $line)) {
                $line['line'] = '?';
            }

            $path = $this->getFilePath($line['file']);
            if($path == 'bin/concise' || substr($path, 0, 7) == 'vendor/') {
                continue;
            }
            if($lastFile != $line['file']) {
                $message .= " \033[90m$path\033[0m\n";
            }
            $message .= "    \033[90mLine {$line['line']}: {$line['class']}{$line['type']}{$line['function']}()\033[0m\n";
            $lastFile = $line['file'];
        }
        $prefix = "\033[4{$color}m " . str_repeat(' ', strlen($this->issueCount)) . "\033[0m";
        $message = $this->prefixLines($prefix, rtrim($message, "\n"));
        $this->appendTextAbove("$top\n$message\n\n");
        ++$this->issueCount;
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)
    {
        $this->add($test, $e, 1);
        ++$this->numTestsFailed;
    }

    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 1);
        ++$this->numTestsErrors;
    }

    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 3);
        ++$this->numTestsIncomplete;
    }

    public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 3);
        ++$this->numTestsRisky;
    }

    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 4);
        ++$this->numTestsSkipped;
    }
}

class Concise_TestRunner extends PHPUnit_TextUI_TestRunner
{
}

class Concise_Command extends PHPUnit_TextUI_Command
{
    protected function createRunner()
    {
        $runner = new Concise_TestRunner($this->arguments['loader']);
        $runner->setPrinter(new Concise_ResultPrinter());
        return $runner;
    }
}

$command = new Concise_Command();
$command->run($_SERVER['argv'], true);
