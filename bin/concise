#!/usr/bin/env php
<?php

require_once('vendor/autoload.php');

echo "Concise 1.0 by Elliot Chance.\n\n";

class Concise_ResultPrinter extends PHPUnit_TextUI_ResultPrinter
{
    protected $width = 79;

    protected $numTestsFailed = 0;

    public function __construct()
    {
    	parent::__construct();
    	$this->width = exec('tput cols');
    }

    public function write($buffer)
    {
        if(substr($buffer, 0, 7) !== 'PHPUnit') {
            return parent::write($buffer);
        }
    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        if ($test instanceof PHPUnit_Framework_TestCase) {
            $this->numAssertions += $test->getNumAssertions();
        }
        else if ($test instanceof PHPUnit_Extensions_PhptTestCase) {
            $this->numAssertions++;
        }

        ++$this->numTestsRun;
        $this->update();
    }

    protected function printHeader()
    {
        echo "\n";
    }

    protected function printFooter(PHPUnit_Framework_TestResult $result)
    {
    	if (count($result) === 0) {
    		$message = 'No tests executed!';
            echo "\033[2A\033[0;30m\033[42m{$message}\033[0m";
        }
        else if ($result->wasSuccessful() &&
                 $result->allHarmless() &&
                 $result->allCompletelyImplemented() &&
                 $result->noneSkipped()) {
    		$message = 'OK';
	        echo "\033[2A\033[0;30m\033[42m{$message}\033[0m";
        }
        else if ((!$result->allCompletelyImplemented() ||
                  !$result->allHarmless() ||
                  !$result->noneSkipped()) &&
                 $result->wasSuccessful()) {
    		$message = 'OK, but incomplete, skipped, or risky tests!';
	        echo "\033[2A\033[0;30m\033[42m{$message}\033[0m";
        }

		parent::printHeader();
    }

    protected function repeat($string, $times)
    {
    	if($times < 0) {
    		return '';
    	}
    	return str_repeat($string, $times);
    }

    protected function update()
    {
        if($this->numTestsRun > 1) {
            echo "\033[2A";
        }

        $assertionString = $this->numAssertions . ' assertion' . ($this->numAssertions == 1 ? '' : 's');
        echo $assertionString . $this->repeat(' ', $this->width - (2 * $this->numTestsWidth) - 11 - strlen($assertionString));
        $done = $this->numTestsRun / $this->numTests;
        printf(' %' . $this->numTestsWidth . 'd / %' . $this->numTestsWidth . "d (%3s%%)\n",
            $this->numTestsRun, $this->numTests, floor($done * 100));

        $failures = 0;
        if($this->numTestsFailed) {
        	$failures = ceil($this->width * $this->numTestsFailed / $this->numTests);
        }
        $successes = floor($this->width * $done) - $failures;
        echo "\033[42m" . $this->repeat(' ', $successes);
        echo "\033[41m" . $this->repeat(' ', $failures);
        echo "\033[0m" . $this->repeat('_', $this->width - $successes - $failures) . "\n";
    }

    protected function printDefect(PHPUnit_Framework_TestFailure $defect, $count)
    {
        $this->printDefectHeader($defect, $count);
        $this->printDefectTrace($defect);
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)
    {
        ++$this->numTestsFailed;
    }

    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        ++$this->numTestsFailed;
    }

    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
    }

    public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
    }

    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
    }
}

class Concise_TestRunner extends PHPUnit_TextUI_TestRunner
{
}

class Concise_Command extends PHPUnit_TextUI_Command
{
    protected function createRunner()
    {
        $runner = new Concise_TestRunner($this->arguments['loader']);
        $runner->setPrinter(new Concise_ResultPrinter());
        return $runner;
    }
}

$command = new Concise_Command();
$command->run($_SERVER['argv'], true);
