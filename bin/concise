#!/usr/bin/env php
<?php

require_once('vendor/autoload.php');

use Concise\Console\ResultPrinter\DefaultResultPrinter;
use Concise\Console\TestRunner\DefaultTestRunner;
use Concise\Console\ResultPrinter\ResultPrinterProxy;
use Concise\Console\ResultPrinter\Utilities\ProportionalProgressBar;
use Concise\Console\ResultPrinter\Utilities\FilePathSimplifier;

$version = new \Concise\Version();
echo trim("Concise " . $version->getConciseVersion()) . " by Elliot Chance.\n\n";

class Concise_ResultPrinter extends DefaultResultPrinter
{
    protected $width = 79;

    protected $lastUpdate;

    protected $issueCount = 1;

    protected $numTestsWidth;

    public function __construct()
    {
        $this->width = exec('tput cols');
    }

    protected function repeat($string, $times)
    {
        if($times < 0) {
            return '';
        }
        return str_repeat($string, $times);
    }

    protected function testsToBars($tests)
    {
        if ($tests <= 0) {
            return 0;
        }
        $done = $this->getTestCount() / $this->getTotalTestCount();
        return ceil($tests / $this->getTotalTestCount() * $this->width * $done);
    }

    protected function drawProgressBar()
    {
        $progressBar = new ProportionalProgressBar();
        return $progressBar->renderProportional($this->width, $this->getTotalTestCount(), array(
            'green'   => $this->getSuccessCount(),
            'yellow'  => $this->getIncompleteCount() + $this->getRiskyCount(),
            'blue'    => $this->getSkippedCount(),
            'red'     => $this->getFailureCount() + $this->getErrorCount(),
        )) . "\n";
    }

    protected function getAssertionString()
    {
        $assertionString = $this->getAssertionCount() . ' assertion' . ($this->getAssertionCount() == 1 ? '' : 's');
        $done = $this->getTestCount() / $this->getTotalTestCount();
        $assertionString .= $this->repeat(' ', $this->width - (2 * $this->numTestsWidth) - 11 - strlen($assertionString));
        $assertionString .= sprintf(' %' . $this->numTestsWidth . 'd / %' . $this->numTestsWidth . "d (%3s%%)\n",
            $this->getTestCount(), $this->getTotalTestCount(), floor($done * 100));
        return $assertionString;
    }

    public function update()
    {
        echo $this->getAssertionString();
        echo $this->drawProgressBar();
        echo "\033[2F";
    }

    protected function prefixLines($prefix, $lines)
    {
        return $prefix . str_replace("\n", "\n$prefix", $lines);
    }

    protected function renderTraceLine(array $line, $path, $lastFile)
    {
        $message = '';
        if($lastFile != $line['file']) {
            $message .= " \033[90m$path\033[0m\n";
        }
        $message .= "    \033[90mLine {$line['line']}: ";
        if(array_key_exists('class', $line)) {
            $message .= "{$line['class']}{$line['type']}";
        }
        $message .= "{$line['function']}()\033[0m\n";

        return $message;
    }

    protected function renderTrace(Exception $e)
    {
        $simplifier = new FilePathSimplifier();
        $message = '';
        $lastFile = '';
        foreach($e->getTrace() as $line) {
            if(!array_key_exists('file', $line)) {
                $line['file'] = '(unknown file)';
            }
            if(!array_key_exists('line', $line)) {
                $line['line'] = '?';
            }

            $path = $simplifier->process($line['file']);
            if ($path == 'bin/concise' || substr($path, 0, 7) == 'vendor/') {
                $lastFile = $line['file'];
                continue;
            }
            $message .= $this->renderTraceLine($line, $path, $lastFile);
            $lastFile = $line['file'];
        }
        return $message;
    }

    protected function add(PHPUnit_Framework_TestCase $test, Exception $e, $color)
    {
        $top = "{$this->issueCount}. \033[9{$color};4m" . get_class($test) . "::" . $test->getName() . "\n";
        $message = " " . $e->getMessage() . "\n\n";
        $message .= $this->renderTrace($e);
        
        $prefix = "\033[4{$color}m " . str_repeat(' ', strlen($this->issueCount)) . "\033[0m";
        $message = $this->prefixLines($prefix, rtrim($message, "\n"));
        $this->appendTextAbove("$top\n$message\n\n");
        ++$this->issueCount;
    }

    public function appendTextAbove($text)
    {
        echo str_replace("\n", "\033[K\n", $text);
        $this->update();
    }

    public function endTest($status, PHPUnit_Framework_Test $test, $time, Exception $e = null)
    {
        parent::endTest($status, $test, $time, $e);
        switch ($status) {
            case PHPUnit_Runner_BaseTestRunner::STATUS_FAILURE:
            case PHPUnit_Runner_BaseTestRunner::STATUS_ERROR:
                $this->add($test, $e, 1);
                break;

            case PHPUnit_Runner_BaseTestRunner::STATUS_RISKY:
            case PHPUnit_Runner_BaseTestRunner::STATUS_INCOMPLETE:
                $this->add($test, $e, 3);
                break;

            case PHPUnit_Runner_BaseTestRunner::STATUS_SKIPPED:
                $this->add($test, $e, 4);
                break;
        }
        $this->update();
    }

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        parent::startTestSuite($suite);
        $this->numTestsWidth = strlen($this->getTotalTestCount());
        $this->update();
    }
}

class Concise_ResultPrinterProxy extends ResultPrinterProxy
{
}

class Concise_Command extends PHPUnit_TextUI_Command
{
    protected function createRunner()
    {
        $runner = new DefaultTestRunner();
        $runner->setPrinter(new Concise_ResultPrinterProxy(new Concise_ResultPrinter()));
        return $runner;
    }
}

$command = new Concise_Command();
$command->run($_SERVER['argv'], true);
