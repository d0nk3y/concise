#!/usr/bin/env php
<?php

require_once('vendor/autoload.php');

use \Concise\Console\ResultPrinter;
use \Concise\Console\TestRunner;
use \Concise\Console\ResultPrinterProxy;

$version = new \Concise\Version();
echo trim("Concise " . $version->getConciseVersion()) . " by Elliot Chance.\n\n";

class Concise_ResultPrinter extends ResultPrinter
{
    protected $width = 79;

    protected $lastUpdate;

    protected $issueCount = 1;

    protected $numTestsWidth;

    public function __construct()
    {
        $this->width = exec('tput cols');
    }

    protected function repeat($string, $times)
    {
        if($times < 0) {
            return '';
        }
        return str_repeat($string, $times);
    }

    protected function testsToBars($tests)
    {
        if ($tests <= 0) {
            return 0;
        }
        $done = $this->getTestCount() / $this->getTotalTestCount();
        return $tests / $this->getTotalTestCount() * $this->width * $done;
    }

    public function update()
    {
        $assertionString = $this->getAssertionCount() . ' assertion' . ($this->getAssertionCount() == 1 ? '' : 's');
        echo $assertionString . $this->repeat(' ', $this->width - (2 * $this->numTestsWidth) - 11 - strlen($assertionString));
        $done = $this->getTestCount() / $this->getTotalTestCount();
        printf(' %' . $this->numTestsWidth . 'd / %' . $this->numTestsWidth . "d (%3s%%)\n",
            $this->getTestCount(), $this->getTotalTestCount(), floor($done * 100));

        $skipped = ceil($this->testsToBars($this->getSkippedCount()));
        $incomplete = ceil($this->testsToBars($this->getIncompleteCount() + $this->getRiskyCount()));
        $failures = ceil($this->testsToBars($this->getFailureCount() + $this->getErrorCount()));
        $nonsuccesses = $skipped - $incomplete - $failures;
        $successes = ceil($this->testsToBars($this->getSuccessCount())) - $nonsuccesses;

        echo "\033[102m" . $this->repeat(' ', $successes);
        echo "\033[101m" . $this->repeat(' ', $failures);
        echo "\033[103m" . $this->repeat(' ', $incomplete);
        echo "\033[104m" . $this->repeat(' ', $skipped);
        echo "\033[0m" . $this->repeat('_', $this->width - $successes - $nonsuccesses) . "\n";

        echo "\033[2F";
    }

    protected function getFilePath($absolutePath)
    {
        $cwd = getcwd();
        if (substr($absolutePath, 0, strlen($cwd)) === $cwd) {
            return substr($absolutePath, strlen($cwd) + 1);
        }
        return $absolutePath;
    }

    protected function prefixLines($prefix, $lines)
    {
        return $prefix . str_replace("\n", "\n$prefix", $lines);
    }

    protected function add(PHPUnit_Framework_Test $test, Exception $e, $color)
    {
        $top = "{$this->issueCount}. \033[9{$color};4m" . get_class($test) . "::" . $test->getName() . "\n";
        $message = " " . $e->getMessage() . "\n\n";
        $lastFile = '';
        foreach($e->getTrace() as $line) {
            if(!array_key_exists('file', $line)) {
                $line['file'] = '(unknown file)';
            }
            if(!array_key_exists('line', $line)) {
                $line['line'] = '?';
            }

            $path = $this->getFilePath($line['file']);
            if($path == 'bin/concise' || substr($path, 0, 7) == 'vendor/') {
                continue;
            }
            if($lastFile != $line['file']) {
                $message .= " \033[90m$path\033[0m\n";
            }
            $message .= "    \033[90mLine {$line['line']}: ";
            if(array_key_exists('class', $line)) {
                $message .= "{$line['class']}{$line['type']}";
            }
            $message .= "{$line['function']}()\033[0m\n";
            $lastFile = $line['file'];
        }
        $prefix = "\033[4{$color}m " . str_repeat(' ', strlen($this->issueCount)) . "\033[0m";
        $message = $this->prefixLines($prefix, rtrim($message, "\n"));
        $this->appendTextAbove("$top\n$message\n\n");
        ++$this->issueCount;
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)
    {
        $this->add($test, $e, 1);
    }

    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 1);
    }

    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 3);
    }

    public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 3);
    }

    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        $this->add($test, $e, 4);
    }

    public function appendTextAbove($text)
    {
        echo str_replace("\n", "\033[K\n", $text);
        $this->update();
    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        parent::endTest($test, $time);
        $this->update();
    }

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        parent::startTestSuite($suite);
        $this->numTestsWidth = strlen($this->getTotalTestCount());
    }
}

class Concise_ResultPrinterProxy extends ResultPrinterProxy
{
}

class Concise_Command extends PHPUnit_TextUI_Command
{
    protected function createRunner()
    {
        $runner = new TestRunner();
        $runner->setPrinter(new Concise_ResultPrinterProxy(new Concise_ResultPrinter()));
        return $runner;
    }
}

$command = new Concise_Command();
$command->run($_SERVER['argv'], true);
